#ifndef BITCOIN_CHAINPARAMSSEEDS_H
#define BITCOIN_CHAINPARAMSSEEDS_H
/**
 * List of fixed seed nodes for the bitcoin network
 * AUTOGENERATED by contrib/seeds/generate-seeds.py
 *
 * Each line contains a 16-byte IPv6 address and a port.
 * IPv4 as well as onion addresses are wrapped inside a IPv6 address accordingly.
 */
 // ***TODO*** fix generate-seeds.py and REGENERATE
static SeedSpec6 pnSeed6_main[] = { 
	{{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x94,0xfb,0x50,0xe2}, 9779},
	{{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x57,0xf7,0x8e,0xe4}, 9779},
	{{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc1,0x2f,0x21,0xbc}, 9779},
	{{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x02,0x3a,0x62,0x3e}, 9779},
	{{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc1,0x2f,0x21,0xa0}, 9779},
	{{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc1,0x2f,0x21,0xfd}, 9779},
	{{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc1,0x2f,0x21,0x03}, 9779},
	{{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc1,0x2f,0x21,0x73}, 9779},
	{{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2d,0x5b,0x08,0xf8}, 9779},
	{{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2d,0x5b,0x08,0xf9}, 9779},
	{{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2d,0x08,0x9d,0xe6}, 9779},
	{{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2d,0x08,0x9d,0xe7}, 9779},
};

static SeedSpec6 pnSeed6_test[] = { };

#include "arith_uint256.h"
void MineGenesisBlock(CBlock &genesis);

void MineGenesisBlock(CBlock &genesis)
{
    arith_uint256 best = arith_uint256();
    int n=0;
    arith_uint256 hashTarget = arith_uint256().SetCompact(genesis.nBits);
    while (UintToArith256(genesis.GetHash()) > hashTarget) {
        arith_uint256 c=UintToArith256(genesis.GetHash());

        if(c < best || n==0)
        {
            best = c;
            n=1;
            std::cout << genesis.GetHash().GetHex().c_str() << " -- "  << hashTarget.GetHex().c_str() << " -- " << best.GetHex().c_str() << std::endl;
        }
        ++genesis.nNonce;
        if (genesis.nNonce == 0) 
            ++genesis.nTime;
    }
    //printf("HASH IS: %s\n", UintToArith256(genesis.GetHash()).ToString().c_str());
    std::cout << "Converting genesis hash to string: " << genesis.ToString().c_str() << std::endl; 
}

#endif // BITCOIN_CHAINPARAMSSEEDS_H
